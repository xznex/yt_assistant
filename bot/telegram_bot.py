from __future__ import annotations

import asyncio
from datetime import datetime
import io
import logging
import os
import re
from functools import wraps
from uuid import uuid4

from PIL import Image
from pydub import AudioSegment
from telegram import BotCommandScopeAllGroupChats, Update, constants
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, InlineQueryResultArticle
from telegram import InputTextMessageContent, BotCommand
from telegram.error import RetryAfter, TimedOut, BadRequest
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, \
    filters, InlineQueryHandler, CallbackQueryHandler, Application, ContextTypes, CallbackContext

from openai_helper import OpenAIHelper, localized_text
from usage_tracker import UsageTracker
from utils import is_group_chat, get_thread_id, message_text, wrap_with_indicator, split_into_chunks, \
    edit_message_with_retry, get_stream_cutoff_values, is_allowed, get_remaining_budget, is_within_budget, \
    get_reply_to_message_id, add_chat_request_to_usage_tracker, error_handler, is_direct_result, handle_direct_result, \
    cleanup_intermediate_files
from youtube_transcript_api import YouTubeTranscriptApi, NoTranscriptFound, TranscriptsDisabled, \
    TranslationLanguageNotAvailable
import prodamuspy

from database import Session
from models import User, Subscription

"""
    TODO: –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ (–º–µ–Ω—é, –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ, —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)

    –í –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ñ–∞ –æ —Ç–µ–∫—É—â–µ–º —Ç–∞—Ä–∏—Ñ–µ

    –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:
        –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, *–ò–º—è*
        
        –í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: –¥–µ–º–æ
        –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:  ‚Äî
        
        (–ò–ª–∏ –∂–µ —Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –≤ –∫–∞–±–∏–Ω–µ—Ç–µ) 
        
        –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ  –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üëáüèª
        
        –£–∑–Ω–∞—Ç—å –æ —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–∞—Ö (–∫–Ω–æ–ø–∫–∞ –≤—ã–∑—ã–≤–∞–µ—Ç –æ–∫–æ—à–∫–æ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ)
        
        –ù–∞—à–∏ –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã (–∑–¥–µ—Å—å —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç fabricbot.ru)
    –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ:
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µüëáüèª

        –ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π –∫–∞—Ä–º–∞–Ω–Ω—ã–π YouTube –ø—Ä–æ–¥—é—Å–µ—Ä üëãüèª  
        
        –°–æ–∑–¥–∞—Ç–µ–ª—å –Ω–∞–∑–≤–∞–ª –º–µ–Ω—è –°–∏–ª—å–≤–∏—è, –Ω–æ –¥–ª—è —Ç–µ–±—è —è –±—É–¥—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –ø–æ —Å—Ç–∞—Ä—Ç—É —Ç–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–∞ YouTube üé•  
        
        –Ø —Å—É—â–µ—Å—Ç–≤—É—é, —á—Ç–æ–±—ã —Ç—ã —Å—ç–∫–æ–Ω–æ–º–∏–ª —Å–æ—Ç–Ω–∏ —Ç—ã—Å—è—á —Ä—É–±–ª–µ–π –Ω–∞ –Ω–∞–π–º–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –Ω–∞ –¥–æ—Ä–æ–≥–æ–º –ø—Ä–æ–¥–∞–∫—à–Ω–µ –∏ –Ω–∞—á–∞–ª –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä–≤—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã —É–∂–µ —Å–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º‚ù§Ô∏è  
        
        –Ø –ø—Ä–∏–¥—É–º–∞—é –∑–∞ —Ç–µ–±—è —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏ –¥–∞–∂–µ –ø—Ä–æ–ø–∏—à—É —Ç–µ–≥–∏ –∫ –≤–∏–¥–µ–æ, —Ç–µ–±–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ª–∏—à—å —Å–Ω—è—Ç—å –∏ –≤—ã–ª–æ–∂–∏—Ç—å —Ä–æ–ª–∏–∫ üòª
        
        –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç—ã –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ª—é–±—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ 2 —Ä–∞–∑–∞ –±–µ–∑ –æ–ø–ª–∞—Ç—ã 
        
        –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É 
        
        –í—ã–±–µ—Ä–∏ –∂–µ–ª–∞–µ–º—ã–π —Ç–∞—Ä–∏—Ñ –∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 5-10 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µüëáüèª
        
        –¢–∞—Ä–∏—Ñ—ã –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫
        
        1 –¥–µ–Ω—å - 290 —Ä—É–±–ª–µ–π 
        7 –¥–Ω–µ–π - 1490 —Ä—É–±–ª–µ–π
        30 –¥–Ω–µ–π - 4990 —Ä—É–±–ª–µ–π
    —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:
        –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ–ø–ª–∞—Ç–∏–ª –ª—é–±—É—é –ø–æ–¥–ø–∏—Å–∫—É, —è –±—É–¥—É –¥–∞—Ä–∏—Ç—å —Ç–µ–±–µ 20% –æ—Ç –µ–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç—ã –µ–π –º–æ–∂–µ—à—å, –æ–ø–ª–∞—Ç–∏–≤ –ª—é–±–æ–π —Ç–∞—Ä–∏—Ñ –ø—Ä–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–µ

        –î–ª—è —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ: *—Ä–µ—Ñ —Å—Å—ã–ª–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è* - –æ–Ω–∞ –≤—ã–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∞–ø–∏ 
        
        –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @fabricbothelper
    
"""


class UserContext:
    """
    Class user context
    """

    def __init__(self):
        self._chat_id = None
        self._name = None  # –∏–º—è
        self._channel_description = None  # True –∏–ª–∏ False
        self._channel_idea = None  # —Å—Ç—Ä–æ–∫–∞

    def update_user_name(self, user_id, new_name):
        with Session() as session:
            user = session.query(User).filter(User.id == user_id).first()

            if not user:
                new_user = User(id=user_id, name=new_name)
                session.add(new_user)
            else:
                if user.name == new_name:
                    return
                user.name = new_name

            self._name = new_name
            session.commit()

    def save_description(self, user_id, new_description):
        with Session() as session:
            user = session.query(User).filter(User.id == user_id).first()

            if not user:
                new_user = User(id=user_id, channel_description=new_description)
                session.add(new_user)
            else:
                user.channel_description = new_description

            self._channel_description = new_description
            session.commit()

    def save_idea(self, user_id, new_idea):
        with Session() as session:
            user = session.query(User).filter(User.id == user_id).first()

            if not user:
                new_user = User(id=user_id, channel_idea=new_idea)
                session.add(new_user)
            else:
                user.channel_idea = new_idea

            self._channel_idea = new_idea
            session.commit()

    # def save_description_and_idea(self, user_id, new_description, new_idea):
    #     with Session() as session:
    #         user = session.query(User).filter(User.id == user_id).first()
    #
    #         if not user:
    #             new_user = User(id=user_id, channel_description=new_description, channel_idea=new_idea)
    #             session.add(new_user)
    #         else:
    #             user.channel_description = new_description
    #             user.channel_idea = new_idea
    #
    #         self._channel_description = new_description
    #         self._channel_idea = new_idea
    #         session.commit()


class ChatGPTTelegramBot:
    """
    Class representing a ChatGPT Telegram Bot.
    """

    def __init__(self, config: dict, openai: OpenAIHelper):
        """
        Initializes the bot with the given configuration and GPT bot object.
        :param config: A dictionary containing the bot configuration
        :param openai: OpenAIHelper object
        """
        self.config = config
        self.openai = openai
        bot_language = self.config['bot_language']
        # –º–µ–Ω—é, –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ, —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
        self.commands = [
            BotCommand(command='info', description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ"),
            BotCommand(command='menu', description="–ú–µ–Ω—é"),
            BotCommand(command='account', description="–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"),
            BotCommand(command='naming', description="–£–ø–∞–∫–æ–≤–∫–∞ –∫–∞–Ω–∞–ª–∞"),
            BotCommand(command='video', description="–°–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –≤–∏–¥–µ–æ"),
            BotCommand(command='shorts', description="–°–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π shorts"),
            BotCommand(command='seo', description="–ü—Ä–∏–¥—É–º–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –≤–∏–¥–µ–æ"),
            BotCommand(command='referral', description="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"),
            BotCommand(command='support', description="–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"),
            BotCommand(command='restart', description="–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        ]
        # If imaging is enabled, add the "image" command to the list
        # if self.config.get('enable_image_generation', False):
        #     self.commands.append(
        #         BotCommand(command='image', description=localized_text('image_description', bot_language)))

        # if self.config.get('enable_tts_generation', False):
        #     self.commands.append(BotCommand(command='tts', description=localized_text('tts_description', bot_language)))

        self.group_commands = [BotCommand(
            command='chat', description=localized_text('chat_description', bot_language)
        )] + self.commands
        self.disallowed_message = localized_text('disallowed', bot_language)
        self.budget_limit_message = localized_text('budget_limit', bot_language)
        self.usage = {}
        self.last_message = {}
        self.inline_queries_cache = {}

        self.user_contexts = {}
        self.user_states = {}
        self.user_input = {}

    async def check_subscription_status(self, user_id: int, feature: str) -> bool:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        with Session() as session:
            user = session.query(User).filter(User.id == user_id).first()
            if not user:
                return False

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            free_uses_attr = f"{feature}_free_uses"
            free_uses = getattr(user, free_uses_attr, 0)

            if free_uses > 0:
                # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True
                setattr(user, free_uses_attr, free_uses - 1)
                session.commit()
                return True

            current_time = datetime.now()
            subscription = session.query(Subscription) \
                .filter(Subscription.user_id == user_id, Subscription.expiration_date > current_time) \
                .first()
            if subscription:
                # –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç
                return True

        # –ù–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        return False

    async def check_and_handle_subscription_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE, feature: str):
        user_id = update.effective_user.id
        has_subscription = await self.check_subscription_status(user_id, feature)

        if not has_subscription:
            subscription_7_id = 1779399
            subscription_30_id = 1779400
            url_7_success = f"https://t.me/youtube_assistant_dev2_bot?start=subscription_paid_7_days_{user_id}"
            url_30_success = f"https://t.me/youtube_assistant_dev2_bot?start=subscription_paid_30_days_{user_id}"

            keyboard = [
                [InlineKeyboardButton("1 –¥–µ–Ω—å - 290 —Ä—É–±–ª–µ–π", url='https://www.youtube.com/watch?v=dQw4w9WgXcQ')],
                [InlineKeyboardButton("7 –¥–Ω–µ–π - 1490 —Ä—É–±–ª–µ–π", url=f'https://kirbudilovcoach.payform.ru/?order_id={user_id}&subscription={subscription_7_id}&do=pay&urlSuccess={url_7_success}')],
                [InlineKeyboardButton("30 –¥–Ω–µ–π - 4990 —Ä—É–±–ª–µ–π", url=f'https://kirbudilovcoach.payform.ru/?order_id={user_id}&subscription={subscription_30_id}&do=pay&urlSuccess={url_30_success}')],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫.\n\n"
                     "–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n\n"
                     "–í—ã–±–µ—Ä–∏ –∂–µ–ª–∞–µ–º—ã–π —Ç–∞—Ä–∏—Ñ –∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 5-10 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µüëáüèª",
                reply_markup=reply_markup
            )
            return False
        return True

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        args = context.args
        chat_id = update.message.chat_id

        if args and args[0].startswith("subscription_paid_"):
            # https://t.me/youtube_assistant_dev2_bot?start=subscription_paid_7_days_627512965
            _, _, days, _, user_id = args[0].split("_")
            # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            has_subscription = await self.check_subscription_status(user_id, "nothing")

            if has_subscription:
                await update.message.reply_text(
                    f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {days} –¥–Ω–µ–π! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞.")
                return

        await context.bot.send_photo(chat_id=chat_id, photo='start_photo.jpg')
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π –∫–∞—Ä–º–∞–Ω–Ω—ã–π YouTube –ø—Ä–æ–¥—é—Å–µ—Ä üëãüèª\n\n"
            "–°–æ–∑–¥–∞—Ç–µ–ª—å –Ω–∞–∑–≤–∞–ª –º–µ–Ω—è –°–∏–ª—å–≤–∏—è, –Ω–æ –¥–ª—è —Ç–µ–±—è —è –±—É–¥—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –ø–æ —Å—Ç–∞—Ä—Ç—É —Ç–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–∞ YouTube üé•\n\n"
            "–Ø —Å—É—â–µ—Å—Ç–≤—É—é, —á—Ç–æ–±—ã —Ç—ã —Å—ç–∫–æ–Ω–æ–º–∏–ª —Å–æ—Ç–Ω–∏ —Ç—ã—Å—è—á —Ä—É–±–ª–µ–π –Ω–∞ –Ω–∞–π–º–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –Ω–∞ –¥–æ—Ä–æ–≥–æ–º –ø—Ä–æ–¥–∞–∫—à–Ω–µ –∏ –Ω–∞—á–∞–ª –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä–≤—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã —É–∂–µ —Å–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º‚ù§Ô∏è\n\n"
            "–Ø –ø—Ä–∏–¥—É–º–∞—é –∑–∞ —Ç–µ–±—è —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏ –¥–∞–∂–µ –ø—Ä–æ–ø–∏—à—É —Ç–µ–≥–∏ –∫ –≤–∏–¥–µ–æ, —Ç–µ–±–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ª–∏—à—å —Å–Ω—è—Ç—å –∏ –≤—ã–ª–æ–∂–∏—Ç—å —Ä–æ–ª–∏–∫ üòª",
        )
        await update.message.reply_text(
            "–ù–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
        )

        self.user_states[update.effective_chat.id] = 'waiting_for_name'

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.message.from_user.id
        state = self.user_states.get(update.effective_chat.id)
        chat_id = update.effective_chat.id
        if state == 'waiting_for_name':
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # self.user_context.name = update.message.text

            if chat_id not in self.user_contexts:
                user_context = UserContext()
                self.user_contexts[chat_id] = user_context
            else:
                user_context = self.user_contexts[chat_id]

            user_context.update_user_name(chat_id, update.message.text)

            # self.user_names[update.effective_chat.id] = update.message.text
            # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.user_states[update.effective_chat.id] = 'awaiting_channel_description'
            # –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –æ –∫–∞–Ω–∞–ª–µ
            keyboard = [
                [InlineKeyboardButton("–£–∂–µ –µ—Å—Ç—å", callback_data='channel_exists')],
                [InlineKeyboardButton("–°–æ–±–∏—Ä–∞—é—Å—å –Ω–∞—á–∞—Ç—å", callback_data='starting_channel')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"–†–∞–¥–∞, –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É, {update.message.text}! –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å YouTube –∫–∞–Ω–∞–ª –∏–ª–∏ —Ç—ã —Ç–æ–ª—å–∫–æ —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è –µ–≥–æ –Ω–∞—á–∞—Ç—å?",
                reply_markup=reply_markup
            )
        elif state == 'awaiting_channel_description':
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_input = update.message.text
            await self.to_continue_or_see_features(update, context, user_input)

            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é continue_or_see_features –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–π –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            # await self.turnkey_generation(update, context)
        elif state == 'waiting_user_description':
            user_input = update.message.text
            # self.user_input[update.effective_chat.id] = user_input
            await self.turnkey_generation(update, context, user_description=user_input)
        elif state == 'waiting_for_seo':
            user_input = update.message.text
            await self.seo_handler(update, context, user_input)
        elif state == 'create_new_video_handler':
            user_input = update.message.text
            await self.create_new_video_handler(update, context, user_input)
        elif state == 'create_new_shorts_handler':
            user_input = update.message.text
            await update.message.reply_text(
                "–û—Ç–ª–∏—á–Ω–æ! –£—à–ª–∞ –ø–∏—Å–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏! üòá"
            )
            await self.create_new_shorts_handler(update, context, user_input)
        if state == "awaiting_correct_url":
            try:
                # Try processing the URL again
                await self.seo_handler(update, context, update.message.text)
                # If successful, reset the user's state
                self.user_states[user_id] = "normal"
            except ValueError as e:
                # If still invalid, inform the user and wait for another attempt
                await context.bot.send_message(chat_id=update.message.chat_id,
                                               text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ YouTube.")

    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.callback_query.from_user.id
        chat_id = update.effective_chat.id if update.effective_chat else update.callback_query.message.chat_id
        query = update.callback_query
        await query.answer()
        if query.data == 'channel_exists':
            await self.couple_of_questions(update, context)
        elif query.data == 'starting_channel':
            await self.couple_of_questions(update, context)
        elif query.data == "ready_to_continue":
            await self.input_channel_packaging(update, context)
        elif query.data == "turnkey_channel":
            await update.callback_query.message.reply_text(
                "–û—Ç–ª–∏—á–Ω–æ, —É–∂–µ —É—à–ª–∞ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞, –∞ –ø–æ–∫–∞ —Ç—ã –º–æ–∂–µ—à—å –µ—â–µ –∫–æ–µ —Å —á–µ–º –º–Ω–µ –ø–æ–º–æ—á—å. \n\n–ù–∞–ø–∏—à–∏ –æ—Ç 10 –¥–æ 40 —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–∂–Ω–æ –æ–ø–∏—Å–∞—Ç—å –∏–¥–µ—é —Ç–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞, —ç—Ç–æ —Å–∏–ª—å–Ω–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –≤—ã–≤–æ–¥–∏—Ç—å –Ω–∞—à–∏ —Ä–æ–ª–∏–∫ –≤ —Ç–æ–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –∑—Ä–∏—Ç–µ–ª–µ–π –≤ –±—É–¥—É—â–µ–º üòç"
            )
            await self.turnkey_generation(update, context)
        elif query.data == "view_features":
            await self.view_features(update, context)
        elif query.data == "start_creating_video":
            await self.congratulations_with_readiness(update, context)
        elif query.data == "create_new_video":
            await self.create_new_video(update, context)
        elif query.data == "create_new_shorts":
            await self.create_new_shorts(update, context)
        elif query.data == "info":
            await self.info(update, context)
        elif query.data == "account":
            await self.account(update, context)
        # elif query.data == 'subscription_1_day':
        #     payment_url = f"https://kirbudilovcoach.payform.ru/?do=pay&products"
        # elif query.data == 'subscription_7_days':
        #     payment_url = f"https://kirbudilovcoach.payform.ru/?order_id={user_id}&subscription=1779399&do=pay"
        #     user_id = update.message.from_user.id
        # elif query.data == 'subscription_30_days':
        #     payment_url = f"https://kirbudilovcoach.payform.ru/?order_id={user_id}&subscription=1779400&do=pay"

    async def menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ YouTube –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –≤–∏–¥–µ–æ\n\n–í–æ—Ç –∑–∞–¥–∞—á–∏, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —è –º–æ–≥—É –ø–æ–º–æ—á—å üëá  \n/naming - –£–ø–∞–∫–æ–≤–∫–∞ –∫–∞–Ω–∞–ª–∞ \n/video - –°–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –≤–∏–¥–µ–æ \n/shorts - –°–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π shorts  \n/seo - –ü—Ä–∏–¥—É–º–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –≤–∏–¥–µ–æ  \n/restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ \n\n–í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –º–µ–Ω—é –≤—ã—à–µ"
        )

    async def couple_of_questions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [
            [InlineKeyboardButton("–î–∞", callback_data='ready_to_continue')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–Ø –∑–∞–¥–∞–º –≤—Å–µ–≥–æ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤, –∞ –∑–∞—Ç–µ–º —Ç—ã —Å–º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ª–Ω–æ–º—É –¥–æ—Å—Ç—É–ø—É –∏ –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω—É—é –¥–ª—è —Å–µ–±—è —Ñ—É–Ω–∫—Ü–∏—é, –≥–æ—Ç–æ–≤? üé•",
            reply_markup=reply_markup
        )

    async def input_channel_packaging(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.callback_query.message.reply_text(
            "–ö–ª–∞—Å—Å, –¥–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å —É–ø–∞–∫–æ–≤–∫–∏ –∫–∞–Ω–∞–ª–∞ –∏ —è –ø—Ä–∏–¥—É–º–∞—é —Ç–µ–±–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ. –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –≤ 2-3—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö –æ —á–µ–º —Ç–≤–æ–π –∫–∞–Ω–∞–ª?\n\n–ü–æ—Å—Ç–∞—Ä–∞–π—Å—è —Ä–∞—Å–∫—Ä—ã—Ç—å—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ, —ç—Ç–æ –ø—Ä–∞–≤–¥–∞ –≤–∞–∂–Ω–æ ‚ù§Ô∏è"
        )
        await update.callback_query.message.reply_text(
            "–ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞—è —Å \"–û...\"\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –û —Ç–æ–º, –∫–∞–∫ –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º –∏–∑–±–∞–≤–ª—è—Ç—å—Å—è –æ—Ç —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é —Ç—Ä–∞–Ω—Å–æ–≤—ã–µ —Ç–µ—Ö–Ω–∏–∫ –∏ –∫–∞–∫ —Å—Ç–∞—Ç—å –±–æ–ª–µ–µ —Å—á–∞—Å—Ç–ª–∏–≤—ã–º –∏ –º–µ–Ω—Ç–∞–ª—å–Ω–æ –∑–¥–æ—Ä–æ–≤—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º. –ú–æ–π –∫–∞–Ω–∞–ª –ø—Ä–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é, –º—ã—à–ª–µ–Ω–∏–µ –∏ –ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ. –ü—Ä–æ..."
        )
        self.user_states[update.effective_chat.id] = 'awaiting_channel_description'

    async def to_continue_or_see_features(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_input: str):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        user_id = update.message.from_user.id
        chat_id = update.effective_chat.id
        if chat_id not in self.user_contexts:
            user_context = UserContext()
            self.user_contexts[chat_id] = user_context
        else:
            user_context = self.user_contexts[chat_id]

        user_context.save_description(user_id, user_input)
        # user_context.save_description_and_idea(chat_id, user_description, user_input)

        keyboard = [
            [InlineKeyboardButton("–ö–∞–Ω–∞–ª \"–ü–æ–¥ –∫–ª—é—á\"", callback_data='turnkey_channel')],
            [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏", callback_data='view_features')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        # await update.message.reply_text(f"–¢–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_input}")
        self.user_input[update.effective_chat.id] = user_input
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ö–ª–∞—Å—Å. –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ \"–ø–æ–¥ –∫–ª—é—á\" –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—à—å?üé•",
            reply_markup=reply_markup
        )

    async def turnkey_generation(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_description=None):
        user_input = self.user_input.get(update.effective_chat.id)
        chat_id = update.effective_chat.id

        if not user_description:
            await update.callback_query.message.reply_text(
                "–ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–∞ —Å–ø–∏—Å–∫–æ–º, —Å–∫–æ–ª—å–∫–æ —Å–º–æ–∂–µ—à—å –ø—Ä–∏–¥—É–º–∞—Ç—å. –ü—Ä–∏–º–µ—Ä: –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è, –∫–æ—É—á–∏–Ω–≥, –º—ã—à–ª–µ–Ω–∏–µ, —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ç–µ–ª–æ, –∑–¥–æ—Ä–æ–≤—å–µ, ..."
            )

        self.user_states[update.effective_chat.id] = 'waiting_user_description'

        if user_description == None:
            return

        user_description = user_description

        feature = "naming"
        if not await self.check_and_handle_subscription_status(update, context, feature):
            return

        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ, —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –≤–µ—Ä–Ω—É—Å—å –∫ —Ç–µ–±–µ —Å –∏–¥–µ—è–º–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–∞–Ω–∞–ª–∞, –Ω–∏–∫—É–¥–∞ –Ω–µ —É—Ö–æ–¥–∏!"
        )

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ idea
        if chat_id not in self.user_contexts:
            user_context = UserContext()
            self.user_contexts[chat_id] = user_context
        else:
            user_context = self.user_contexts[chat_id]

        user_context.save_idea(chat_id, user_input)

        titles_prompt = f"–ü—Ä–∏–¥—É–º–∞–π 50 –≤–µ—Ä—Å–∏–π –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è YouTube –∫–∞–Ω–∞–ª–∞ {user_input}. –í –Ω–∞–∑–≤–∞–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è –æ—Ç 2 –¥–æ 4 —Å–ª–æ–≤, –æ—Ç—Ä–∞–∂–∞—é—â–∏—Ö —Ç–µ–º–∞—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞, –Ω–æ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞–∫ —Ü–µ–ª–æ—Å—Ç–Ω–∞—è —Ñ—Ä–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫—Ä–æ–º–µ 50 –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ –Ω–µ –ø–∏—à–∏ –≤ —ç—Ç–æ–º –æ—Ç–≤–µ—Ç–µ. –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"
        description_prompt = f"–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —é—Ç—É–± –∫–∞–Ω–∞–ª—É –ø—Ä–æ {user_description} –í –æ–ø–∏—Å–∞–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 400 —Å–ª–æ–≤. –£–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ —Ç–æ–º, –∫–∞–∫–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –∑–¥–µ—Å—å –ª—é–¥–∏ —Å–º–æ–≥—É—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –¥–æ–±–∞–≤—å –ø—Ä–∏–∑—ã–≤—ã –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏ —É–∫–∞–∂–∏, –∫–æ–º—É —Ç–æ—á–Ω–æ —Å—Ç–æ–∏—Ç –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª–µ –∏ —Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –†—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
        titles_response, titles_total_tokens = await self.openai.get_chat_response(chat_id=chat_id, query=titles_prompt)
        description_response, description_total_tokens = await self.openai.get_chat_response(chat_id=chat_id,
                                                                                             query=description_prompt)
        # await update.message.reply_text(
        #     f"–ü—Ä–∏–¥—É–º–∞–ª–∞ –¥–ª—è —Ç–µ–±—è 50 –∏–¥–µ–π –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è, –≤—ã–±–µ—Ä–∏ –ª—é–±–æ–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–µ—Å—è üëá\n\n{user_input}"
        # )
        await update.message.reply_text(
            f"–ü—Ä–∏–¥—É–º–∞–ª–∞ –¥–ª—è —Ç–µ–±—è 50 –∏–¥–µ–π –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è, –≤—ã–±–µ—Ä–∏ –ª—é–±–æ–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–µ—Å—è üëá\n\n{str(titles_response)}"
        )
        # await update.message.reply_text(
        #     f"–ê –≤–æ—Ç –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞! –ú–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ. –ö—Å—Ç–∞—Ç–∏, —è –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∞ –Ω–∏–∂–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å üëá"
        # )

        keyboard = [
            [InlineKeyboardButton("–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–∏—é –≤–∏–¥–µ–æ", callback_data='start_creating_video')],
            [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–π", callback_data='view_features')],
            [InlineKeyboardButton("–ö–∞–∫ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ?",
                                  url='https://support.google.com/youtube/answer/2657964')]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await context.bot.send_message(chat_id=chat_id,
                                       text=f"–ê –≤–æ—Ç –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞! –ú–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ. –ö—Å—Ç–∞—Ç–∏, —è –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∞ –Ω–∏–∂–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å üëá\n\n{description_response}",
                                       reply_markup=reply_markup)

        # await self.prompt(update, context, f"–ü—Ä–∏–¥—É–º–∞–π 50 –≤–µ—Ä—Å–∏–π –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è YouTube –∫–∞–Ω–∞–ª–∞ {user_input}. –í –Ω–∞–∑–≤–∞–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è –æ—Ç 2 –¥–æ 4 —Å–ª–æ–≤, –æ—Ç—Ä–∞–∂–∞—é—â–∏—Ö —Ç–µ–º–∞—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞, –Ω–æ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞–∫ —Ü–µ–ª–æ—Å—Ç–Ω–∞—è —Ñ—Ä–∞–∑–∞.–ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ")

        # self.prompt(upd)
        # –Ω–µ–æ–±–æ—Ö–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ ChatGPT —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ self.prompt(), –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–º–ø—Ç: ("–ü—Ä–∏–¥—É–º–∞–π 50 –≤–µ—Ä—Å–∏–π –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è YouTube –∫–∞–Ω–∞–ª–∞ {user_input}. –í –Ω–∞–∑–≤–∞–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è –æ—Ç 2 –¥–æ 4 —Å–ª–æ–≤, –æ—Ç—Ä–∞–∂–∞—é—â–∏—Ö —Ç–µ–º–∞—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞, –Ω–æ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞–∫ —Ü–µ–ª–æ—Å—Ç–Ω–∞—è —Ñ—Ä–∞–∑–∞.–ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ")

    async def view_features(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.callback_query.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ YouTube –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –≤–∏–¥–µ–æ\n\n–í–æ—Ç –∑–∞–¥–∞—á–∏, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —è –º–æ–≥—É –ø–æ–º–æ—á—å üëá  \n/naming - –£–ø–∞–∫–æ–≤–∫–∞ –∫–∞–Ω–∞–ª–∞ \n/video - –°–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –≤–∏–¥–µ–æ \n/shorts - –°–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π shorts  \n/seo - –ü—Ä–∏–¥—É–º–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –≤–∏–¥–µ–æ  \n/restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ \n\n–í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –º–µ–Ω—é –≤—ã—à–µ"
        )

    async def congratulations_with_readiness(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        text = """–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –Ω–∞—à –∫–∞–Ω–∞–ª –≥–æ—Ç–æ–≤! –ü–æ–∑–∂–µ –º—ã —Å–æ–∑–¥–∞–¥–∏–º —à–∞–ø–∫—É –∏ –ª–æ–≥–æ—Ç–∏–ø, –∞ —Ç–µ–ø–µ—Ä—å –ø—Ä–µ–¥–ª–∞–≥–∞—é –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–µ—Ä–≤—ã—Ö Shorts, —á—Ç–æ–±—ã —É–∂–µ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã.\n\n*–¢–µ–ø–µ—Ä—å –¥–ª—è —Ç–µ–±—è –æ—Ç–∫—Ä—ã—Ç—ã –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∂–º–∏ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é*"""
        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("–ú–µ–Ω—é", callback_data='view_features')]])
        await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode='Markdown')

    async def naming(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.message.from_user.id
        with Session() as session:
            user = session.query(User).filter(User.id == user_id).first()
            if user:
                user.channel_description = None
                user.channel_idea = None
                session.commit()

        await update.message.reply_text(
            "–ö–ª–∞—Å—Å, –Ω–∞—á–Ω–µ–º —É–ø–∞–∫–æ–≤—ã–≤–∞—Ç—å –∫–∞–Ω–∞–ª. –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –≤ 2-3—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö –æ —á–µ–º —Ç–≤–æ–π –æ–Ω?\n\n–ü–æ—Å—Ç–∞—Ä–∞–π—Å—è —Ä–∞—Å–∫—Ä—ã—Ç—å—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ, —ç—Ç–æ –ø—Ä–∞–≤–¥–∞ –≤–∞–∂–Ω–æ ‚ù§Ô∏è"
        )
        await update.message.reply_text(
            "–ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞—è —Å \"–û...\"\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –û —Ç–æ–º, –∫–∞–∫ –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º –∏–∑–±–∞–≤–ª—è—Ç—å—Å—è –æ—Ç —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é —Ç—Ä–∞–Ω—Å–æ–≤—ã–µ —Ç–µ—Ö–Ω–∏–∫ –∏ –∫–∞–∫ —Å—Ç–∞—Ç—å –±–æ–ª–µ–µ —Å—á–∞—Å—Ç–ª–∏–≤—ã–º –∏ –º–µ–Ω—Ç–∞–ª—å–Ω–æ –∑–¥–æ—Ä–æ–≤—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º. –ú–æ–π –∫–∞–Ω–∞–ª –ø—Ä–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é, –º—ã—à–ª–µ–Ω–∏–µ –∏ –ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ. –ü—Ä–æ..."
        )

        self.user_states[update.effective_chat.id] = 'awaiting_channel_description'

    async def shorts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.message.chat_id
        user_id = update.message.from_user.id

        # await update.message.reply_text(
        #     "–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é shorts!"
        # )

        # TODO: –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ö—Ä–∞–Ω–∏–ª–∏—â—É, –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ë–î + –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å
        with Session() as session:
            user = session.query(User).filter(User.id == user_id).first()
            # print(self.user_contexts[chat_id], self.user_contexts[chat_id]['_channel_description'])
            if user and user.channel_description:
                await update.message.reply_text(
                    "–Ø –≤–∏–∂—É, —á—Ç–æ —Ç—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–ª –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞! \n\n–£ –º–µ–Ω—è –ø–æ—è–≤–∏–ª–∏—Å—å –º—ã—Å–ª–∏ –æ —á–µ–º –º–æ–∂–Ω–æ —Å–Ω—è—Ç—å —Ç–≤–æ–∏ –ø–µ—Ä–≤—ã–µ —à–æ—Ä—Ç—Å—ã! –ü–æ–π–¥—É –ø—Ä–æ–ø–∏—à—É —Å—Ü–µ–Ω–∞—Ä–∏–π, –±—É–¥—É –º–µ–Ω—å—à–µ, —á–µ–º —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É üòá"
                )
                feature = "shorts"
                if not await self.check_and_handle_subscription_status(update, context, feature):
                    return
                shorts_query = f"–†–∞—Å–ø–∏—à–∏ 3 —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –ø–æ —Ç–µ–º–µ {user.channel_description} :: —É–∫–∞–∑–∞–≤ –º–µ—Å—Ç–æ —Å—ä–µ–º–∫–∏, —Ä–∞—Å–∫–∞–¥—Ä–æ–≤–∫—É —Å —á–∏—Å–ª–æ–º —Å–µ–∫—É–Ω–¥ :: –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç, –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏–∫–∞ —Å –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –†—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
                shorts_response, shorts_total_tokens = await self.openai.get_chat_response(chat_id=chat_id,
                                                                                           query=shorts_query)

                keyboard = [
                    [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –µ—â–µ —à–æ—Ä—Ç—Å—ã", callback_data='create_new_shorts')],
                    [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='view_features')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=str(shorts_response),
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                return
            await update.message.reply_text(
                "–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é —à–æ—Ä—Ç—Å–æ–≤! –ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö –æ —á–µ–º —Ö–æ—á–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ª—é–¥—è–º –∏ —è –ø—Ä–∏–¥—É–º–∞—é —Ç–µ–±–µ —Å—Ü–µ–Ω–∞—Ä–∏–π üé•\n\n–ù–∞—á–∏–Ω–∞–π —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å \"–û...\""
            )

            self.user_states[update.effective_chat.id] = 'create_new_shorts_handler'

    async def create_new_shorts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        print("ff")  # –¥–∞–∂–µ –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è
        print(update, update.message)
        await update.callback_query.message.reply_text(
            "–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é —à–æ—Ä—Ç—Å–æ–≤! –ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö –æ —á–µ–º —Ö–æ—á–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ª—é–¥—è–º –∏ —è –ø—Ä–∏–¥—É–º–∞—é —Ç–µ–±–µ —Å—Ü–µ–Ω–∞—Ä–∏–π üé•\n\n–ù–∞—á–∏–Ω–∞–π —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å \"–û...\""
        )

        self.user_states[update.effective_chat.id] = 'create_new_shorts_handler'

    async def create_new_shorts_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_input: str):
        chat_id = update.effective_chat.id if update.effective_chat else update.callback_query.message.chat_id

        feature = "shorts"
        if not await self.check_and_handle_subscription_status(update, context, feature):
            return
        shorts_query = f"–†–∞—Å–ø–∏—à–∏ 3 —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –ø–æ —Ç–µ–º–µ {user_input} :: —É–∫–∞–∑–∞–≤ –º–µ—Å—Ç–æ —Å—ä–µ–º–∫–∏, —Ä–∞—Å–∫–∞–¥—Ä–æ–≤–∫—É —Å —á–∏—Å–ª–æ–º —Å–µ–∫—É–Ω–¥ :: –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç, –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏–∫–∞ —Å –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –†—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
        shorts_response, shorts_total_tokens = await self.openai.get_chat_response(chat_id=chat_id, query=shorts_query)
        keyboard = [
            [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –µ—â–µ shorts", callback_data='create_new_shorts')],
            [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='view_features')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=str(shorts_response),
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def seo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ –≤ –¥–æ—Å—Ç—É–ø –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ YouTube –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–µ –º–Ω–µ"
        )

        self.user_states[update.effective_chat.id] = 'waiting_for_seo'

    async def get_subtitles(self, url):
        # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –≤–∏–¥–µ–æ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ URL YouTube
        regex_patterns = [
            r"(?:http[s]?://)?(?:www\.)?youtu\.be\/([a-zA-Z0-9_-]+)",  # –°–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–π URL
            r"(?:http[s]?://)?(?:www\.)?youtube\.com/watch\?v=([a-zA-Z0-9_-]+)",  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º v
            r"(?:http[s]?://)?(?:www\.)?youtube\.com/v/([a-zA-Z0-9_-]+)",  # URL —Å /v/
            r"(?:http[s]?://)?(?:www\.)?youtube\.com/embed/([a-zA-Z0-9_-]+)",  # URL –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        ]

        video_id = None
        for pattern in regex_patterns:
            match = re.search(pattern, url)
            if match:
                video_id = match.group(1)
                break

        if video_id is None:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ YouTube.")

        try:
            subtitles = YouTubeTranscriptApi.get_transcript(video_id, languages=['ru', 'en'])
            subtitles_text = " ".join(item['text'] for item in subtitles)
            return subtitles_text
        except NoTranscriptFound:
            raise ValueError("–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å—É–±—Ç–∏—Ç—Ä—ã.")
        except TranslationLanguageNotAvailable:
            raise ValueError("–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ –Ω–µ—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.")
        except TranscriptsDisabled:
            raise ValueError("–°—É–±—Ç–∏—Ç—Ä—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã, –ª–∏–±–æ —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è.")
        except Exception as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {e}")

    async def seo_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_input: str):
        chat_id = update.message.chat_id
        user_id = update.message.from_user.id

        try:
            feature = "seo"
            if not await self.check_and_handle_subscription_status(update, context, feature):
                return
            await update.message.reply_text(
                "–û—Ç–ª–∏—á–Ω–æ! –£—à–ª–∞ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å seo! üòá"
            )
            subtitles = await self.get_subtitles(user_input)
            print(subtitles)
            # TODO: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–∏—Ç–æ–π —Å—Å—ã–ª–∫–∏
            seo_query = f"–¢–µ–∫—Å—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –≤–∏–¥–µ–æ: {subtitles[:25000]}. –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –≤—ã—à–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –≤–∏–¥–µ–æ —Å–¥–µ–ª–∞–π —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ :: –°–æ–∑–¥–∞–π seo –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–ª—è –≤–∏–¥–µ–æ –Ω–∞ YouTube –ø–æ –∑–∞–¥–∞–Ω–∏—é –Ω–∏–∂–µ: –ü—Ä–∏–¥—É–º–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫–∞ –Ω–∞ YouTube. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –æ—Ç 3 –¥–æ 10. –ü—Ä–µ–¥–ª–æ–∂–∏ –º–Ω–µ 5 –∏–¥–µ–π :: –ü—Ä–∏–¥—É–º–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –≤–∏–¥–µ–æ –Ω–∞ —é—Ç—é–±—É :: –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 3 –∞–±–∑–∞—Ü–µ–≤, –ø–µ—Ä–≤—ã–π –¥–æ–ª–∂–µ–Ω –æ—Ç—Ä–∞–∂–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ –≤ –ø–æ–∏—Å–∫–µ. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ—Ç 10 –¥–æ 15. –í—Ç–æ—Ä–æ–π —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ —Ä–æ–ª–∏–∫ –∏ —Ç–∞–∫ –∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è seo, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ—Ç 12 –¥–æ 15. –í —Ç—Ä–µ—Ç—å–µ–º –∞–±–∑–∞—Ü–µ –¥–æ–ª–∂–Ω–æ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ –∫–∞–Ω–∞–ª–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ—Ç 14 –¥–æ 18. –í –∫–æ–Ω—Ü–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 5 —Ö—ç—à—Ç–µ–≥–æ–≤ –ø–æ —Ç–µ–º–µ –≤–∏–¥–µ–æ, –∫–∞–∂–¥—ã–π —Ö—ç—à—Ç–µ–≥ - 1 —Å–ª–æ–≤–æ. –í. –ß–µ—Ç–≤–µ—Ä—Ç–æ–º –∞–±–∑–∞—Ü–µ –∫ –æ–ø–∏—Å–∞–Ω–∏—é —É–∫–∞–∂–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–æ–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –ò–Ω—Å—Ç–∞–≥—Ä–∞–º - –¢–µ–ª–µ–≥—Ä–∞–º–º - :: –ü—Ä–∏–¥—É–º–∞–π 20 —Ç–µ–≥–æ–≤ –∫ –≤–∏–¥–µ–æ –Ω–∞ YouTube –∏ –ø–µ—Ä–µ—á–∏—Å–ª–∏ –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é :: –§—Ä–∞–∑—ã –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ 3 —Å–ª–æ–≤. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–≥–∏ –º–æ–≥—É—Ç –Ω–∞—á–∏–Ω–∞—Ç—å —Å–æ —Å–ª–æ–≤–∞ ‚Äú–∫–∞–∫‚Äù, –ø—Ä–µ–¥—Å—Ç–∞–≤—å —Ç–µ–≥–∏ –µ–¥–∏–Ω—ã–º —Å–ø–∏—Å–∫–æ–º —Ä–∞–∑–¥–µ–ª–∏–≤ –∏—Ö –∑–∞–ø—è—Ç–æ–π. :: –¢–∞–∫–∂–µ –ø—Ä–∏–¥—É–º–∞–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—ã—à–µ 10 –∏–¥–µ–π –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–≤—å—é –∫–∞—Ä—Ç–∏–Ω–æ–∫ –Ω–∞ –≤–∏–¥–µ–æ –Ω–∞ YouTube, –∫–∞–∫–æ–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ñ–æ—Ç–æ –Ω–∞ —Ñ–æ–Ω–µ, –∫–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω, –∫–∞–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞—Å–ø–æ–ª–æ–∂–∏—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ –∏ –∫–∞–∫–æ–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏, –µ—Å–ª–∏ –Ω–∞–¥–æ, —Ç–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Markdown: –≤–º–µ—Å—Ç–æ ### –æ–±–æ—Ä–∞—á–∏–≤–∞–π —Ç—É —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º, –≤ ** –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ ** –≤ –∫–æ–Ω—Ü–µ"

            seo_response, seo_total_tokens = await self.openai.get_chat_response(chat_id=chat_id, query=seo_query)

            keyboard = [
                [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏", callback_data='view_features')],
            ]

            reply_markup = InlineKeyboardMarkup(keyboard)
            try:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=str(seo_response),
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            except Exception as e:
                # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—ë —Ç–∏–ø
                if "can't parse entities" in str(e):
                    # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–∞–∑–±–æ—Ä–∞ —Å—É—â–Ω–æ—Å—Ç–µ–π, –ø–æ–≤—Ç–æ—Ä—è–µ–º –±–µ–∑ Markdown
                    try:
                        await context.bot.send_message(
                            chat_id=update.effective_chat.id,
                            text=str(seo_response),
                            reply_markup=reply_markup,
                            # –ó–¥–µ—Å—å –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º parse_mode, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        )
                    except Exception as e:
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ
                        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ Markdown: ", str(e))
                        await context.bot.send_message(chat_id=chat_id, text=str(e))
                else:
                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
                    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ", str(e))
                    await context.bot.send_message(chat_id=chat_id, text=str(e))
        except ValueError as e:
            print(e)
            await context.bot.send_message(chat_id=chat_id, text=str(e))
            self.user_states[update.message.from_user.id] = "awaiting_correct_url"

    async def video(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.message.chat_id
        user_id = update.message.from_user.id

        await update.message.reply_text(
            "–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –≤–∏–¥–µ–æ!"
        )

        with Session() as session:
            user = session.query(User).filter(User.id == user_id).first()

            # TODO: –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ
            # TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç–≤–µ—Ç–∞ (response) –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–æ–≥–¥–∞ –æ—Ç–≤–µ—Ç—ã –±–æ–ª—å—à–∏–µ)
            if user and user.channel_description:
                feature = "video"
                if not await self.check_and_handle_subscription_status(update, context, feature):
                    return
                await update.message.reply_text(
                    "–Ø –≤–∏–∂—É, —á—Ç–æ —Ç—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–ª –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞!\n\n–£ –º–µ–Ω—è –ø–æ—è–≤–∏–ª–∏—Å—å –º—ã—Å–ª–∏ –æ —á–µ–º –º–æ–∂–Ω–æ —Å–Ω—è—Ç—å —Ç–≤–æ–µ –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ! –ü–æ–π–¥—É –ø—Ä–æ–ø–∏—à—É —Å—Ü–µ–Ω–∞—Ä–∏–π, –±—É–¥—É –º–µ–Ω—å—à–µ, —á–µ–º —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É üòá"
                )
                video_query = f"–†–∞—Å–ø–∏—à–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –≤–∏–¥–µ–æ –Ω–∞ 5-10 –º–∏–Ω—É—Ç –ø–æ —Ç–µ–º–µ {user.channel_description} :: —É–∫–∞–∑–∞–≤ –º–µ—Å—Ç–æ —Å—ä–µ–º–∫–∏, –ø–æ–¥—Ä–æ–±–Ω—É—é —Ä–∞—Å–∫–∞–¥—Ä–æ–≤–∫—É —Å —á–∏—Å–ª–æ–º —Å–µ–∫—É–Ω–¥, –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∞–≤—Ç–æ—Ä–∞ :: –ù–∞–ø–∏—à–∏ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç, –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–º–µ–∂—É—Ç–∫—É —Ä–∞—Å–∫–∞–¥—Ä–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–∏–∑–Ω–µ—Å–µ—Ç –∞–≤—Ç–æ—Ä, —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ä–æ–ª–∏–∫–∞ –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é :: –ê –ø–æ—Å–ª–µ —É–∫–∞–∂–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏ —Å—ä–µ–º–∫–µ. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –†—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
                video_response, shorts_total_tokens = await self.openai.get_chat_response(chat_id=chat_id,
                                                                                          query=video_query)

                keyboard = [
                    [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –µ—â–µ –≤–∏–¥–µ–æ", callback_data='create_new_video')],
                    [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='view_features')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=str(video_response),
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                return

            await update.message.reply_text(
                "–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –≤–∏–¥–µ–æ! –ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö –æ —á–µ–º —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Ä–æ–ª–∏–∫ –∏ —è –ø—Ä–∏–¥—É–º–∞—é —Ç–µ–±–µ —Å—Ü–µ–Ω–∞—Ä–∏–π üé•\n\n–ù–∞—á–∏–Ω–∞–π —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å \"–û...\""
            )

            self.user_states[update.effective_chat.id] = 'create_new_video_handler'

    # TODO: –ø–æ–æ—â—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async def create_new_video(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.callback_query.message.reply_text(
            "–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –≤–∏–¥–µ–æ! –ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö –æ —á–µ–º —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Ä–æ–ª–∏–∫ –∏ —è –ø—Ä–∏–¥—É–º–∞—é —Ç–µ–±–µ —Å—Ü–µ–Ω–∞—Ä–∏–π üé•\n\n–ù–∞—á–∏–Ω–∞–π —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å \"–û...\""
        )

        self.user_states[update.effective_chat.id] = 'create_new_video_handler'

    async def create_new_video_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_input: str):
        chat_id = update.message.chat_id
        user_id = update.message.from_user.id

        feature = "video"
        if not await self.check_and_handle_subscription_status(update, context, feature):
            return
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –£—à–ª–∞ –ø–∏—Å–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π! üòá"
        )
        video_query = f"–†–∞—Å–ø–∏—à–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –≤–∏–¥–µ–æ –Ω–∞ 5-10 –º–∏–Ω—É—Ç –ø–æ —Ç–µ–º–µ {user_input} :: —É–∫–∞–∑–∞–≤ –º–µ—Å—Ç–æ —Å—ä–µ–º–∫–∏, –ø–æ–¥—Ä–æ–±–Ω—É—é —Ä–∞—Å–∫–∞–¥—Ä–æ–≤–∫—É —Å —á–∏—Å–ª–æ–º —Å–µ–∫—É–Ω–¥, –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∞–≤—Ç–æ—Ä–∞ :: –ù–∞–ø–∏—à–∏ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç, –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–º–µ–∂—É—Ç–∫—É —Ä–∞—Å–∫–∞–¥—Ä–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–∏–∑–Ω–µ—Å–µ—Ç –∞–≤—Ç–æ—Ä, —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ä–æ–ª–∏–∫–∞ –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é :: –ê –ø–æ—Å–ª–µ —É–∫–∞–∂–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏ —Å—ä–µ–º–∫–µ. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –†—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
        video_response, shorts_total_tokens = await self.openai.get_chat_response(chat_id=chat_id, query=video_query)
        await update.message.reply_text(
            "–í–æ—Ç —Ç–≤–æ–π –æ—Ç–≤–µ—Ç!"
        )
        keyboard = [
            [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –µ—â–µ –≤–∏–¥–µ–æ", callback_data='create_new_video')],
            [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='view_features')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=str(video_response),
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def support(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [
            [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å", url='https://t.me/fabricbothelper')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="[–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ]\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, –Ω–∞–∂–º–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ üé•",
            reply_markup=reply_markup
        )

    async def restart(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        print("–¥–æ—à–ª–∞")
        chat_id = update.message.chat_id
        user_id = update.message.from_user.id
        with Session() as session:
            user = session.query(User).filter(User.id == user_id).first()
            if user:
                user.name = None
                user.channel_description = None
                user.channel_idea = None
                session.commit()
        await self.start(update, context)

    async def info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        subscription_7_id = 1779399
        subscription_30_id = 1779400
        url_7_success = f"https://t.me/youtube_assistant_dev2_bot?start=subscription_paid_7_days_{user_id}"
        url_30_success = f"https://t.me/youtube_assistant_dev2_bot?start=subscription_paid_30_days_{user_id}"

        keyboard_demo = [
            [InlineKeyboardButton("1 –¥–µ–Ω—å - 290 —Ä—É–±–ª–µ–π", url='https://www.youtube.com/watch?v=dQw4w9WgXcQ')],
            [InlineKeyboardButton("7 –¥–Ω–µ–π - 1490 —Ä—É–±–ª–µ–π",
                                  url=f'https://kirbudilovcoach.payform.ru/?order_id={user_id}&subscription={subscription_7_id}&do=pay&urlSuccess={url_7_success}')],
            [InlineKeyboardButton("30 –¥–Ω–µ–π - 4990 —Ä—É–±–ª–µ–π",
                                  url=f'https://kirbudilovcoach.payform.ru/?order_id={user_id}&subscription={subscription_30_id}&do=pay&urlSuccess={url_30_success}')],
        ]
        keyboard = [
            [InlineKeyboardButton("–ú–µ–Ω—é", callback_data='view_features')],
            [InlineKeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='account')],
        ]
        reply_markup_demo = InlineKeyboardMarkup(keyboard_demo)
        reply_markup = InlineKeyboardMarkup(keyboard)

        with Session() as session:
            user = session.query(User).filter(User.id == user_id).first()
            if user:
                subscription = session.query(Subscription).filter(Subscription.user_id == user_id).first()
                if subscription:
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text=f"–ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π –∫–∞—Ä–º–∞–Ω–Ω—ã–π YouTube –ø—Ä–æ–¥—é—Å–µ—Ä üëãüèª  \n\n"
                             f"–°–æ–∑–¥–∞—Ç–µ–ª—å –Ω–∞–∑–≤–∞–ª –º–µ–Ω—è –°–∏–ª—å–≤–∏—è, –Ω–æ –¥–ª—è —Ç–µ–±—è —è –±—É–¥—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –ø–æ —Å—Ç–∞—Ä—Ç—É —Ç–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–∞ YouTube üé• \n\n"
                             f"–Ø —Å—É—â–µ—Å—Ç–≤—É—é, —á—Ç–æ–±—ã —Ç—ã —Å—ç–∫–æ–Ω–æ–º–∏–ª —Å–æ—Ç–Ω–∏ —Ç—ã—Å—è—á —Ä—É–±–ª–µ–π –Ω–∞ –Ω–∞–π–º–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –Ω–∞ –¥–æ—Ä–æ–≥–æ–º –ø—Ä–æ–¥–∞–∫—à–Ω–µ –∏ –Ω–∞—á–∞–ª –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä–≤—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã —É–∂–µ —Å–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º‚ù§\n\n"
                             f"–Ø –ø—Ä–∏–¥—É–º–∞—é –∑–∞ —Ç–µ–±—è —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏ –¥–∞–∂–µ –ø—Ä–æ–ø–∏—à—É —Ç–µ–≥–∏ –∫ –≤–∏–¥–µ–æ, —Ç–µ–±–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ª–∏—à—å —Å–Ω—è—Ç—å –∏ –≤—ã–ª–æ–∂–∏—Ç—å —Ä–æ–ª–∏–∫ üòª\n\n"
                             f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –£ —Ç–µ–±—è —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω —Ç–∞—Ä–∏—Ñ: {subscription.tariff} \n\n"
                             f"–ú–æ–∂–µ—à—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–π YouTube –∫–∞–Ω–∞–ª üòâ",
                        reply_markup=reply_markup
                    )
                    return

        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"–ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π –∫–∞—Ä–º–∞–Ω–Ω—ã–π YouTube –ø—Ä–æ–¥—é—Å–µ—Ä üëãüèª  \n\n"
                 f"–°–æ–∑–¥–∞—Ç–µ–ª—å –Ω–∞–∑–≤–∞–ª –º–µ–Ω—è –°–∏–ª—å–≤–∏—è, –Ω–æ –¥–ª—è —Ç–µ–±—è —è –±—É–¥—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –ø–æ —Å—Ç–∞—Ä—Ç—É —Ç–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–∞ YouTube üé• \n\n"
                 f"–Ø —Å—É—â–µ—Å—Ç–≤—É—é, —á—Ç–æ–±—ã —Ç—ã —Å—ç–∫–æ–Ω–æ–º–∏–ª —Å–æ—Ç–Ω–∏ —Ç—ã—Å—è—á —Ä—É–±–ª–µ–π –Ω–∞ –Ω–∞–π–º–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –Ω–∞ –¥–æ—Ä–æ–≥–æ–º –ø—Ä–æ–¥–∞–∫—à–Ω–µ –∏ –Ω–∞—á–∞–ª –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä–≤—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã —É–∂–µ —Å–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º‚ù§\n\n"
                 f"–Ø –ø—Ä–∏–¥—É–º–∞—é –∑–∞ —Ç–µ–±—è —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏ –¥–∞–∂–µ –ø—Ä–æ–ø–∏—à—É —Ç–µ–≥–∏ –∫ –≤–∏–¥–µ–æ, —Ç–µ–±–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ª–∏—à—å —Å–Ω—è—Ç—å –∏ –≤—ã–ª–æ–∂–∏—Ç—å —Ä–æ–ª–∏–∫ üòª\n\n"
                 f"–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç—ã –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ª—é–±—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ 2 —Ä–∞–∑–∞ –±–µ–∑ –æ–ø–ª–∞—Ç—ã\n\n"
                 f"–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n\n"
                 f"–í—ã–±–µ—Ä–∏ –∂–µ–ª–∞–µ–º—ã–π —Ç–∞—Ä–∏—Ñ –∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 5-10 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µüëáüèª\n\n",
            reply_markup=reply_markup_demo
        )

    async def account(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.message.from_user.id if update.message else update.effective_user.id
        # chat_id = update.effective_chat.id if update.effective_chat else update.callback_query.message.chat_id
        name = "–ê–Ω–æ–Ω–∏–º"
        tariff_info = "–¥–µ–º–æ"
        keyboard = [
            [InlineKeyboardButton("–ù–∞—à–∏ –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã", url="https://fabricbot.ru")]
        ]
        keyboard_demo = [
            [InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –æ —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–∞—Ö", callback_data='info')],
            [InlineKeyboardButton("–ù–∞—à–∏ –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã", url="https://fabricbot.ru")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        reply_markup_demo = InlineKeyboardMarkup(keyboard_demo)
        with Session() as session:
            user = session.query(User).filter(User.id == user_id).first()
            if user:
                name = user.name or name
                subscription = session.query(Subscription).filter(Subscription.user_id == user_id).first()
                if subscription:
                    tariff_info = subscription.tariff
                    # –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
                    expiration_date = subscription.expiration_date.strftime("%Y-%m-%d")
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!\n\n"
                             f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: {tariff_info}\n"
                             f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:  {expiration_date}\n\n",
                        reply_markup=reply_markup
                    )
                    return
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!\n\n"
                     f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: {tariff_info}\n\n"
                     f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏:\n"
                     f"--–£–ø–∞–∫–æ–≤–∫–∞ –∫–∞–Ω–∞–ª–∞: {user.naming_free_uses}\n"
                     f"--–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ—Ä–∏–µ–≤ –≤–∏–¥–µ–æ: {user.shorts_free_uses}\n"
                     f"--–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ shorts: {user.video_free_uses}\n"
                     f"--SEO –¥–ª—è —Ä–æ–ª–∏–∫–æ–≤: {user.seo_free_uses}\n\n"
                     f"–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üëáüèª",
                reply_markup=reply_markup_demo
            )

    async def referral(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [
            [InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", url='https://t.me/fabricbothelper')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"[–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ]\n\n–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ–ø–ª–∞—Ç–∏–ª –ª—é–±—É—é –ø–æ–¥–ø–∏—Å–∫—É, —è –±—É–¥—É –¥–∞—Ä–∏—Ç—å —Ç–µ–±–µ 20% –æ—Ç –µ–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç—ã –µ–π –º–æ–∂–µ—à—å, –æ–ø–ª–∞—Ç–∏–≤ –ª—é–±–æ–π —Ç–∞—Ä–∏—Ñ –ø—Ä–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–µ\n\n"
                 f"–î–ª—è —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ: *—Ä–µ—Ñ —Å—Å—ã–ª–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è* - –æ–Ω–∞ –≤—ã–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º –∞–ø–∏\n\n"
                 f"–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π",
            reply_markup=reply_markup
        )

    async def help(self, update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
        """
        Shows the help menu.
        """
        commands = self.group_commands if is_group_chat(update) else self.commands
        commands_description = [f'/{command.command} - {command.description}' for command in commands]
        bot_language = self.config['bot_language']
        help_text = (
                localized_text('help_text', bot_language)[0] +
                '\n\n' +
                '\n'.join(commands_description) +
                '\n\n' +
                localized_text('help_text', bot_language)[1] +
                '\n\n' +
                localized_text('help_text', bot_language)[2]
        )
        await update.message.reply_text(help_text, disable_web_page_preview=True)

    async def stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        Returns token usage statistics for current day and month.
        """
        if not await is_allowed(self.config, update, context):
            logging.warning(f'User {update.message.from_user.name} (id: {update.message.from_user.id}) '
                            f'is not allowed to request their usage statistics')
            await self.send_disallowed_message(update, context)
            return

        logging.info(f'User {update.message.from_user.name} (id: {update.message.from_user.id}) '
                     f'requested their usage statistics')

        user_id = update.message.from_user.id
        if user_id not in self.usage:
            self.usage[user_id] = UsageTracker(user_id, update.message.from_user.name)

        tokens_today, tokens_month = self.usage[user_id].get_current_token_usage()
        images_today, images_month = self.usage[user_id].get_current_image_count()
        (transcribe_minutes_today, transcribe_seconds_today, transcribe_minutes_month,
         transcribe_seconds_month) = self.usage[user_id].get_current_transcription_duration()
        vision_today, vision_month = self.usage[user_id].get_current_vision_tokens()
        characters_today, characters_month = self.usage[user_id].get_current_tts_usage()
        current_cost = self.usage[user_id].get_current_cost()

        chat_id = update.effective_chat.id
        chat_messages, chat_token_length = self.openai.get_conversation_stats(chat_id)
        remaining_budget = get_remaining_budget(self.config, self.usage, update)
        bot_language = self.config['bot_language']

        text_current_conversation = (
            f"*{localized_text('stats_conversation', bot_language)[0]}*:\n"
            f"{chat_messages} {localized_text('stats_conversation', bot_language)[1]}\n"
            f"{chat_token_length} {localized_text('stats_conversation', bot_language)[2]}\n"
            f"----------------------------\n"
        )

        # Check if image generation is enabled and, if so, generate the image statistics for today
        text_today_images = ""
        if self.config.get('enable_image_generation', False):
            text_today_images = f"{images_today} {localized_text('stats_images', bot_language)}\n"

        text_today_vision = ""
        if self.config.get('enable_vision', False):
            text_today_vision = f"{vision_today} {localized_text('stats_vision', bot_language)}\n"

        text_today_tts = ""
        if self.config.get('enable_tts_generation', False):
            text_today_tts = f"{characters_today} {localized_text('stats_tts', bot_language)}\n"

        text_today = (
            f"*{localized_text('usage_today', bot_language)}:*\n"
            f"{tokens_today} {localized_text('stats_tokens', bot_language)}\n"
            f"{text_today_images}"  # Include the image statistics for today if applicable
            f"{text_today_vision}"
            f"{text_today_tts}"
            f"{transcribe_minutes_today} {localized_text('stats_transcribe', bot_language)[0]} "
            f"{transcribe_seconds_today} {localized_text('stats_transcribe', bot_language)[1]}\n"
            f"{localized_text('stats_total', bot_language)}{current_cost['cost_today']:.2f}\n"
            f"----------------------------\n"
        )

        text_month_images = ""
        if self.config.get('enable_image_generation', False):
            text_month_images = f"{images_month} {localized_text('stats_images', bot_language)}\n"

        text_month_vision = ""
        if self.config.get('enable_vision', False):
            text_month_vision = f"{vision_month} {localized_text('stats_vision', bot_language)}\n"

        text_month_tts = ""
        if self.config.get('enable_tts_generation', False):
            text_month_tts = f"{characters_month} {localized_text('stats_tts', bot_language)}\n"

        # Check if image generation is enabled and, if so, generate the image statistics for the month
        text_month = (
            f"*{localized_text('usage_month', bot_language)}:*\n"
            f"{tokens_month} {localized_text('stats_tokens', bot_language)}\n"
            f"{text_month_images}"  # Include the image statistics for the month if applicable
            f"{text_month_vision}"
            f"{text_month_tts}"
            f"{transcribe_minutes_month} {localized_text('stats_transcribe', bot_language)[0]} "
            f"{transcribe_seconds_month} {localized_text('stats_transcribe', bot_language)[1]}\n"
            f"{localized_text('stats_total', bot_language)}{current_cost['cost_month']:.2f}"
        )

        # text_budget filled with conditional content
        text_budget = "\n\n"
        budget_period = self.config['budget_period']
        if remaining_budget < float('inf'):
            text_budget += (
                f"{localized_text('stats_budget', bot_language)}"
                f"{localized_text(budget_period, bot_language)}: "
                f"${remaining_budget:.2f}.\n"
            )
        # No longer works as of July 21st 2023, as OpenAI has removed the billing API
        # add OpenAI account information for admin request
        # if is_admin(self.config, user_id):
        #     text_budget += (
        #         f"{localized_text('stats_openai', bot_language)}"
        #         f"{self.openai.get_billing_current_month():.2f}"
        #     )

        usage_text = text_current_conversation + text_today + text_month + text_budget
        await update.message.reply_text(usage_text, parse_mode=constants.ParseMode.MARKDOWN)

    async def resend(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        Resend the last request
        """
        if not await is_allowed(self.config, update, context):
            logging.warning(f'User {update.message.from_user.name}  (id: {update.message.from_user.id})'
                            f' is not allowed to resend the message')
            await self.send_disallowed_message(update, context)
            return

        chat_id = update.effective_chat.id
        if chat_id not in self.last_message:
            logging.warning(f'User {update.message.from_user.name} (id: {update.message.from_user.id})'
                            f' does not have anything to resend')
            await update.effective_message.reply_text(
                message_thread_id=get_thread_id(update),
                text=localized_text('resend_failed', self.config['bot_language'])
            )
            return

        # Update message text, clear self.last_message and send the request to prompt
        logging.info(f'Resending the last prompt from user: {update.message.from_user.name} '
                     f'(id: {update.message.from_user.id})')
        with update.message._unfrozen() as message:
            message.text = self.last_message.pop(chat_id)

        await self.prompt(update=update, context=context)

    async def reset(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        Resets the conversation.
        """
        if not await is_allowed(self.config, update, context):
            logging.warning(f'User {update.message.from_user.name} (id: {update.message.from_user.id}) '
                            f'is not allowed to reset the conversation')
            await self.send_disallowed_message(update, context)
            return

        logging.info(f'Resetting the conversation for user {update.message.from_user.name} '
                     f'(id: {update.message.from_user.id})...')

        chat_id = update.effective_chat.id
        reset_content = message_text(update.message)
        self.openai.reset_chat_history(chat_id=chat_id, content=reset_content)
        await update.effective_message.reply_text(
            message_thread_id=get_thread_id(update),
            text=localized_text('reset_done', self.config['bot_language'])
        )

    async def image(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        Generates an image for the given prompt using DALL¬∑E APIs
        """
        if not self.config['enable_image_generation'] \
                or not await self.check_allowed_and_within_budget(update, context):
            return

        image_query = message_text(update.message)
        if image_query == '':
            await update.effective_message.reply_text(
                message_thread_id=get_thread_id(update),
                text=localized_text('image_no_prompt', self.config['bot_language'])
            )
            return

        logging.info(f'New image generation request received from user {update.message.from_user.name} '
                     f'(id: {update.message.from_user.id})')

        async def _generate():
            try:
                image_url, image_size = await self.openai.generate_image(prompt=image_query)
                if self.config['image_receive_mode'] == 'photo':
                    await update.effective_message.reply_photo(
                        reply_to_message_id=get_reply_to_message_id(self.config, update),
                        photo=image_url
                    )
                elif self.config['image_receive_mode'] == 'document':
                    await update.effective_message.reply_document(
                        reply_to_message_id=get_reply_to_message_id(self.config, update),
                        document=image_url
                    )
                else:
                    raise Exception(
                        f"env variable IMAGE_RECEIVE_MODE has invalid value {self.config['image_receive_mode']}")
                # add image request to users usage tracker
                user_id = update.message.from_user.id
                self.usage[user_id].add_image_request(image_size, self.config['image_prices'])
                # add guest chat request to guest usage tracker
                if str(user_id) not in self.config['allowed_user_ids'].split(',') and 'guests' in self.usage:
                    self.usage["guests"].add_image_request(image_size, self.config['image_prices'])

            except Exception as e:
                logging.exception(e)
                await update.effective_message.reply_text(
                    message_thread_id=get_thread_id(update),
                    reply_to_message_id=get_reply_to_message_id(self.config, update),
                    text=f"{localized_text('image_fail', self.config['bot_language'])}: {str(e)}",
                    parse_mode=constants.ParseMode.MARKDOWN
                )

        await wrap_with_indicator(update, context, _generate, constants.ChatAction.UPLOAD_PHOTO)

    async def tts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        Generates an speech for the given input using TTS APIs
        """
        if not self.config['enable_tts_generation'] \
                or not await self.check_allowed_and_within_budget(update, context):
            return

        tts_query = message_text(update.message)
        if tts_query == '':
            await update.effective_message.reply_text(
                message_thread_id=get_thread_id(update),
                text=localized_text('tts_no_prompt', self.config['bot_language'])
            )
            return

        logging.info(f'New speech generation request received from user {update.message.from_user.name} '
                     f'(id: {update.message.from_user.id})')

        async def _generate():
            try:
                speech_file, text_length = await self.openai.generate_speech(text=tts_query)

                await update.effective_message.reply_voice(
                    reply_to_message_id=get_reply_to_message_id(self.config, update),
                    voice=speech_file
                )
                speech_file.close()
                # add image request to users usage tracker
                user_id = update.message.from_user.id
                self.usage[user_id].add_tts_request(text_length, self.config['tts_model'], self.config['tts_prices'])
                # add guest chat request to guest usage tracker
                if str(user_id) not in self.config['allowed_user_ids'].split(',') and 'guests' in self.usage:
                    self.usage["guests"].add_tts_request(text_length, self.config['tts_model'],
                                                         self.config['tts_prices'])

            except Exception as e:
                logging.exception(e)
                await update.effective_message.reply_text(
                    message_thread_id=get_thread_id(update),
                    reply_to_message_id=get_reply_to_message_id(self.config, update),
                    text=f"{localized_text('tts_fail', self.config['bot_language'])}: {str(e)}",
                    parse_mode=constants.ParseMode.MARKDOWN
                )

        await wrap_with_indicator(update, context, _generate, constants.ChatAction.UPLOAD_VOICE)

    async def transcribe(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        Transcribe audio messages.
        """
        if not self.config['enable_transcription'] or not await self.check_allowed_and_within_budget(update, context):
            return

        if is_group_chat(update) and self.config['ignore_group_transcriptions']:
            logging.info(f'Transcription coming from group chat, ignoring...')
            return

        chat_id = update.effective_chat.id
        filename = update.message.effective_attachment.file_unique_id

        async def _execute():
            filename_mp3 = f'{filename}.mp3'
            bot_language = self.config['bot_language']
            try:
                media_file = await context.bot.get_file(update.message.effective_attachment.file_id)
                await media_file.download_to_drive(filename)
            except Exception as e:
                logging.exception(e)
                await update.effective_message.reply_text(
                    message_thread_id=get_thread_id(update),
                    reply_to_message_id=get_reply_to_message_id(self.config, update),
                    text=(
                        f"{localized_text('media_download_fail', bot_language)[0]}: "
                        f"{str(e)}. {localized_text('media_download_fail', bot_language)[1]}"
                    ),
                    parse_mode=constants.ParseMode.MARKDOWN
                )
                return

            try:
                audio_track = AudioSegment.from_file(filename)
                audio_track.export(filename_mp3, format="mp3")
                logging.info(f'New transcribe request received from user {update.message.from_user.name} '
                             f'(id: {update.message.from_user.id})')

            except Exception as e:
                logging.exception(e)
                await update.effective_message.reply_text(
                    message_thread_id=get_thread_id(update),
                    reply_to_message_id=get_reply_to_message_id(self.config, update),
                    text=localized_text('media_type_fail', bot_language)
                )
                if os.path.exists(filename):
                    os.remove(filename)
                return

            user_id = update.message.from_user.id
            if user_id not in self.usage:
                self.usage[user_id] = UsageTracker(user_id, update.message.from_user.name)

            try:
                transcript = await self.openai.transcribe(filename_mp3)

                transcription_price = self.config['transcription_price']
                self.usage[user_id].add_transcription_seconds(audio_track.duration_seconds, transcription_price)

                allowed_user_ids = self.config['allowed_user_ids'].split(',')
                if str(user_id) not in allowed_user_ids and 'guests' in self.usage:
                    self.usage["guests"].add_transcription_seconds(audio_track.duration_seconds, transcription_price)

                # check if transcript starts with any of the prefixes
                response_to_transcription = any(transcript.lower().startswith(prefix.lower()) if prefix else False
                                                for prefix in self.config['voice_reply_prompts'])

                if self.config['voice_reply_transcript'] and not response_to_transcription:

                    # Split into chunks of 4096 characters (Telegram's message limit)
                    transcript_output = f"_{localized_text('transcript', bot_language)}:_\n\"{transcript}\""
                    chunks = split_into_chunks(transcript_output)

                    for index, transcript_chunk in enumerate(chunks):
                        await update.effective_message.reply_text(
                            message_thread_id=get_thread_id(update),
                            reply_to_message_id=get_reply_to_message_id(self.config, update) if index == 0 else None,
                            text=transcript_chunk,
                            parse_mode=constants.ParseMode.MARKDOWN
                        )
                else:
                    # Get the response of the transcript
                    response, total_tokens = await self.openai.get_chat_response(chat_id=chat_id, query=transcript)

                    self.usage[user_id].add_chat_tokens(total_tokens, self.config['token_price'])
                    if str(user_id) not in allowed_user_ids and 'guests' in self.usage:
                        self.usage["guests"].add_chat_tokens(total_tokens, self.config['token_price'])

                    # Split into chunks of 4096 characters (Telegram's message limit)
                    transcript_output = (
                        f"_{localized_text('transcript', bot_language)}:_\n\"{transcript}\"\n\n"
                        f"_{localized_text('answer', bot_language)}:_\n{response}"
                    )
                    chunks = split_into_chunks(transcript_output)

                    for index, transcript_chunk in enumerate(chunks):
                        await update.effective_message.reply_text(
                            message_thread_id=get_thread_id(update),
                            reply_to_message_id=get_reply_to_message_id(self.config, update) if index == 0 else None,
                            text=transcript_chunk,
                            parse_mode=constants.ParseMode.MARKDOWN
                        )

            except Exception as e:
                logging.exception(e)
                await update.effective_message.reply_text(
                    message_thread_id=get_thread_id(update),
                    reply_to_message_id=get_reply_to_message_id(self.config, update),
                    text=f"{localized_text('transcribe_fail', bot_language)}: {str(e)}",
                    parse_mode=constants.ParseMode.MARKDOWN
                )
            finally:
                if os.path.exists(filename_mp3):
                    os.remove(filename_mp3)
                if os.path.exists(filename):
                    os.remove(filename)

        await wrap_with_indicator(update, context, _execute, constants.ChatAction.TYPING)

    async def vision(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        Interpret image using vision model.
        """
        if not self.config['enable_vision'] or not await self.check_allowed_and_within_budget(update, context):
            return

        chat_id = update.effective_chat.id
        prompt = update.message.caption

        if is_group_chat(update):
            if self.config['ignore_group_vision']:
                logging.info(f'Vision coming from group chat, ignoring...')
                return
            else:
                trigger_keyword = self.config['group_trigger_keyword']
                if (prompt is None and trigger_keyword != '') or \
                        (prompt is not None and not prompt.lower().startswith(trigger_keyword.lower())):
                    logging.info(f'Vision coming from group chat with wrong keyword, ignoring...')
                    return

        image = update.message.effective_attachment[-1]

        async def _execute():
            bot_language = self.config['bot_language']
            try:
                media_file = await context.bot.get_file(image.file_id)
                temp_file = io.BytesIO(await media_file.download_as_bytearray())
            except Exception as e:
                logging.exception(e)
                await update.effective_message.reply_text(
                    message_thread_id=get_thread_id(update),
                    reply_to_message_id=get_reply_to_message_id(self.config, update),
                    text=(
                        f"{localized_text('media_download_fail', bot_language)[0]}: "
                        f"{str(e)}. {localized_text('media_download_fail', bot_language)[1]}"
                    ),
                    parse_mode=constants.ParseMode.MARKDOWN
                )
                return

            # convert jpg from telegram to png as understood by openai

            temp_file_png = io.BytesIO()

            try:
                original_image = Image.open(temp_file)

                original_image.save(temp_file_png, format='PNG')
                logging.info(f'New vision request received from user {update.message.from_user.name} '
                             f'(id: {update.message.from_user.id})')

            except Exception as e:
                logging.exception(e)
                await update.effective_message.reply_text(
                    message_thread_id=get_thread_id(update),
                    reply_to_message_id=get_reply_to_message_id(self.config, update),
                    text=localized_text('media_type_fail', bot_language)
                )

            user_id = update.message.from_user.id
            if user_id not in self.usage:
                self.usage[user_id] = UsageTracker(user_id, update.message.from_user.name)

            if self.config['stream']:

                stream_response = self.openai.interpret_image_stream(chat_id=chat_id, fileobj=temp_file_png,
                                                                     prompt=prompt)
                i = 0
                prev = ''
                sent_message = None
                backoff = 0
                stream_chunk = 0

                async for content, tokens in stream_response:
                    if is_direct_result(content):
                        return await handle_direct_result(self.config, update, content)

                    if len(content.strip()) == 0:
                        continue

                    stream_chunks = split_into_chunks(content)
                    if len(stream_chunks) > 1:
                        content = stream_chunks[-1]
                        if stream_chunk != len(stream_chunks) - 1:
                            stream_chunk += 1
                            try:
                                await edit_message_with_retry(context, chat_id, str(sent_message.message_id),
                                                              stream_chunks[-2])
                            except:
                                pass
                            try:
                                sent_message = await update.effective_message.reply_text(
                                    message_thread_id=get_thread_id(update),
                                    text=content if len(content) > 0 else "..."
                                )
                            except:
                                pass
                            continue

                    cutoff = get_stream_cutoff_values(update, content)
                    cutoff += backoff

                    if i == 0:
                        try:
                            if sent_message is not None:
                                await context.bot.delete_message(chat_id=sent_message.chat_id,
                                                                 message_id=sent_message.message_id)
                            sent_message = await update.effective_message.reply_text(
                                message_thread_id=get_thread_id(update),
                                reply_to_message_id=get_reply_to_message_id(self.config, update),
                                text=content,
                            )
                        except:
                            continue

                    elif abs(len(content) - len(prev)) > cutoff or tokens != 'not_finished':
                        prev = content

                        try:
                            use_markdown = tokens != 'not_finished'
                            await edit_message_with_retry(context, chat_id, str(sent_message.message_id),
                                                          text=content, markdown=use_markdown)

                        except RetryAfter as e:
                            backoff += 5
                            await asyncio.sleep(e.retry_after)
                            continue

                        except TimedOut:
                            backoff += 5
                            await asyncio.sleep(0.5)
                            continue

                        except Exception:
                            backoff += 5
                            continue

                        await asyncio.sleep(0.01)

                    i += 1
                    if tokens != 'not_finished':
                        total_tokens = int(tokens)


            else:

                try:
                    interpretation, total_tokens = await self.openai.interpret_image(chat_id, temp_file_png,
                                                                                     prompt=prompt)

                    try:
                        await update.effective_message.reply_text(
                            message_thread_id=get_thread_id(update),
                            reply_to_message_id=get_reply_to_message_id(self.config, update),
                            text=interpretation,
                            parse_mode=constants.ParseMode.MARKDOWN
                        )
                    except BadRequest:
                        try:
                            await update.effective_message.reply_text(
                                message_thread_id=get_thread_id(update),
                                reply_to_message_id=get_reply_to_message_id(self.config, update),
                                text=interpretation
                            )
                        except Exception as e:
                            logging.exception(e)
                            await update.effective_message.reply_text(
                                message_thread_id=get_thread_id(update),
                                reply_to_message_id=get_reply_to_message_id(self.config, update),
                                text=f"{localized_text('vision_fail', bot_language)}: {str(e)}",
                                parse_mode=constants.ParseMode.MARKDOWN
                            )
                except Exception as e:
                    logging.exception(e)
                    await update.effective_message.reply_text(
                        message_thread_id=get_thread_id(update),
                        reply_to_message_id=get_reply_to_message_id(self.config, update),
                        text=f"{localized_text('vision_fail', bot_language)}: {str(e)}",
                        parse_mode=constants.ParseMode.MARKDOWN
                    )
            vision_token_price = self.config['vision_token_price']
            self.usage[user_id].add_vision_tokens(total_tokens, vision_token_price)

            allowed_user_ids = self.config['allowed_user_ids'].split(',')
            if str(user_id) not in allowed_user_ids and 'guests' in self.usage:
                self.usage["guests"].add_vision_tokens(total_tokens, vision_token_price)

        await wrap_with_indicator(update, context, _execute, constants.ChatAction.TYPING)

    async def prompt(self, update: Update, context: ContextTypes.DEFAULT_TYPE, custom_prompt=None):
        """
        React to incoming messages and respond accordingly.
        """
        if update.edited_message or not update.message or update.message.via_bot:
            return

        if not await self.check_allowed_and_within_budget(update, context):
            return

        logging.info(
            f'New message received from user {update.message.from_user.name} (id: {update.message.from_user.id})')
        chat_id = update.effective_chat.id
        user_id = update.message.from_user.id

        if custom_prompt:
            prompt = message_text(custom_prompt)
        else:
            prompt = message_text(update.message)

        self.last_message[chat_id] = prompt

        if is_group_chat(update):
            trigger_keyword = self.config['group_trigger_keyword']

            if prompt.lower().startswith(trigger_keyword.lower()) or update.message.text.lower().startswith('/chat'):
                if prompt.lower().startswith(trigger_keyword.lower()):
                    prompt = prompt[len(trigger_keyword):].strip()

                if update.message.reply_to_message and \
                        update.message.reply_to_message.text and \
                        update.message.reply_to_message.from_user.id != context.bot.id:
                    prompt = f'"{update.message.reply_to_message.text}" {prompt}'
            else:
                if update.message.reply_to_message and update.message.reply_to_message.from_user.id == context.bot.id:
                    logging.info('Message is a reply to the bot, allowing...')
                else:
                    logging.warning('Message does not start with trigger keyword, ignoring...')
                    return

        try:
            total_tokens = 0

            if self.config['stream']:
                await update.effective_message.reply_chat_action(
                    action=constants.ChatAction.TYPING,
                    message_thread_id=get_thread_id(update)
                )

                stream_response = self.openai.get_chat_response_stream(chat_id=chat_id, query=prompt)
                i = 0
                prev = ''
                sent_message = None
                backoff = 0
                stream_chunk = 0

                async for content, tokens in stream_response:
                    if is_direct_result(content):
                        return await handle_direct_result(self.config, update, content)

                    if len(content.strip()) == 0:
                        continue

                    stream_chunks = split_into_chunks(content)
                    if len(stream_chunks) > 1:
                        content = stream_chunks[-1]
                        if stream_chunk != len(stream_chunks) - 1:
                            stream_chunk += 1
                            try:
                                await edit_message_with_retry(context, chat_id, str(sent_message.message_id),
                                                              stream_chunks[-2])
                            except:
                                pass
                            try:
                                sent_message = await update.effective_message.reply_text(
                                    message_thread_id=get_thread_id(update),
                                    text=content if len(content) > 0 else "..."
                                )
                            except:
                                pass
                            continue

                    cutoff = get_stream_cutoff_values(update, content)
                    cutoff += backoff

                    if i == 0:
                        try:
                            if sent_message is not None:
                                await context.bot.delete_message(chat_id=sent_message.chat_id,
                                                                 message_id=sent_message.message_id)
                            sent_message = await update.effective_message.reply_text(
                                message_thread_id=get_thread_id(update),
                                reply_to_message_id=get_reply_to_message_id(self.config, update),
                                text=content,
                            )
                        except:
                            continue

                    elif abs(len(content) - len(prev)) > cutoff or tokens != 'not_finished':
                        prev = content

                        try:
                            use_markdown = tokens != 'not_finished'
                            await edit_message_with_retry(context, chat_id, str(sent_message.message_id),
                                                          text=content, markdown=use_markdown)

                        except RetryAfter as e:
                            backoff += 5
                            await asyncio.sleep(e.retry_after)
                            continue

                        except TimedOut:
                            backoff += 5
                            await asyncio.sleep(0.5)
                            continue

                        except Exception:
                            backoff += 5
                            continue

                        await asyncio.sleep(0.01)

                    i += 1
                    if tokens != 'not_finished':
                        total_tokens = int(tokens)

            else:
                async def _reply():
                    nonlocal total_tokens
                    response, total_tokens = await self.openai.get_chat_response(chat_id=chat_id, query=prompt)

                    if is_direct_result(response):
                        return await handle_direct_result(self.config, update, response)

                    # Split into chunks of 4096 characters (Telegram's message limit)
                    chunks = split_into_chunks(response)

                    for index, chunk in enumerate(chunks):
                        try:
                            await update.effective_message.reply_text(
                                message_thread_id=get_thread_id(update),
                                reply_to_message_id=get_reply_to_message_id(self.config,
                                                                            update) if index == 0 else None,
                                text=chunk,
                                parse_mode=constants.ParseMode.MARKDOWN
                            )
                        except Exception:
                            try:
                                await update.effective_message.reply_text(
                                    message_thread_id=get_thread_id(update),
                                    reply_to_message_id=get_reply_to_message_id(self.config,
                                                                                update) if index == 0 else None,
                                    text=chunk
                                )
                            except Exception as exception:
                                raise exception

                await wrap_with_indicator(update, context, _reply, constants.ChatAction.TYPING)

            add_chat_request_to_usage_tracker(self.usage, self.config, user_id, total_tokens)

        except Exception as e:
            logging.exception(e)
            await update.effective_message.reply_text(
                message_thread_id=get_thread_id(update),
                reply_to_message_id=get_reply_to_message_id(self.config, update),
                text=f"{localized_text('chat_fail', self.config['bot_language'])} {str(e)}",
                parse_mode=constants.ParseMode.MARKDOWN
            )

    async def inline_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        Handle the inline query. This is run when you type: @botusername <query>
        """
        query = update.inline_query.query
        if len(query) < 3:
            return
        if not await self.check_allowed_and_within_budget(update, context, is_inline=True):
            return

        callback_data_suffix = "gpt:"
        result_id = str(uuid4())
        self.inline_queries_cache[result_id] = query
        callback_data = f'{callback_data_suffix}{result_id}'

        await self.send_inline_query_result(update, result_id, message_content=query, callback_data=callback_data)

    async def send_inline_query_result(self, update: Update, result_id, message_content, callback_data=""):
        """
        Send inline query result
        """
        try:
            reply_markup = None
            bot_language = self.config['bot_language']
            if callback_data:
                reply_markup = InlineKeyboardMarkup([[
                    InlineKeyboardButton(text=f'ü§ñ {localized_text("answer_with_chatgpt", bot_language)}',
                                         callback_data=callback_data)
                ]])

            inline_query_result = InlineQueryResultArticle(
                id=result_id,
                title=localized_text("ask_chatgpt", bot_language),
                input_message_content=InputTextMessageContent(message_content),
                description=message_content,
                thumb_url='https://user-images.githubusercontent.com/11541888/223106202-7576ff11-2c8e-408d-94ea'
                          '-b02a7a32149a.png',
                reply_markup=reply_markup
            )

            await update.inline_query.answer([inline_query_result], cache_time=0)
        except Exception as e:
            logging.error(f'An error occurred while generating the result card for inline query {e}')

    async def handle_callback_inline_query(self, update: Update, context: CallbackContext):
        """
        Handle the callback query from the inline query result
        """
        callback_data = update.callback_query.data
        user_id = update.callback_query.from_user.id
        inline_message_id = update.callback_query.inline_message_id
        name = update.callback_query.from_user.name
        callback_data_suffix = "gpt:"
        query = ""
        bot_language = self.config['bot_language']
        answer_tr = localized_text("answer", bot_language)
        loading_tr = localized_text("loading", bot_language)

        try:
            if callback_data.startswith(callback_data_suffix):
                unique_id = callback_data.split(':')[1]
                total_tokens = 0

                # Retrieve the prompt from the cache
                query = self.inline_queries_cache.get(unique_id)
                if query:
                    self.inline_queries_cache.pop(unique_id)
                else:
                    error_message = (
                        f'{localized_text("error", bot_language)}. '
                        f'{localized_text("try_again", bot_language)}'
                    )
                    await edit_message_with_retry(context, chat_id=None, message_id=inline_message_id,
                                                  text=f'{query}\n\n_{answer_tr}:_\n{error_message}',
                                                  is_inline=True)
                    return

                unavailable_message = localized_text("function_unavailable_in_inline_mode", bot_language)
                if self.config['stream']:
                    stream_response = self.openai.get_chat_response_stream(chat_id=user_id, query=query)
                    i = 0
                    prev = ''
                    backoff = 0
                    async for content, tokens in stream_response:
                        if is_direct_result(content):
                            cleanup_intermediate_files(content)
                            await edit_message_with_retry(context, chat_id=None,
                                                          message_id=inline_message_id,
                                                          text=f'{query}\n\n_{answer_tr}:_\n{unavailable_message}',
                                                          is_inline=True)
                            return

                        if len(content.strip()) == 0:
                            continue

                        cutoff = get_stream_cutoff_values(update, content)
                        cutoff += backoff

                        if i == 0:
                            try:
                                await edit_message_with_retry(context, chat_id=None,
                                                              message_id=inline_message_id,
                                                              text=f'{query}\n\n{answer_tr}:\n{content}',
                                                              is_inline=True)
                            except:
                                continue

                        elif abs(len(content) - len(prev)) > cutoff or tokens != 'not_finished':
                            prev = content
                            try:
                                use_markdown = tokens != 'not_finished'
                                divider = '_' if use_markdown else ''
                                text = f'{query}\n\n{divider}{answer_tr}:{divider}\n{content}'

                                # We only want to send the first 4096 characters. No chunking allowed in inline mode.
                                text = text[:4096]

                                await edit_message_with_retry(context, chat_id=None, message_id=inline_message_id,
                                                              text=text, markdown=use_markdown, is_inline=True)

                            except RetryAfter as e:
                                backoff += 5
                                await asyncio.sleep(e.retry_after)
                                continue
                            except TimedOut:
                                backoff += 5
                                await asyncio.sleep(0.5)
                                continue
                            except Exception:
                                backoff += 5
                                continue

                            await asyncio.sleep(0.01)

                        i += 1
                        if tokens != 'not_finished':
                            total_tokens = int(tokens)

                else:
                    async def _send_inline_query_response():
                        nonlocal total_tokens
                        # Edit the current message to indicate that the answer is being processed
                        await context.bot.edit_message_text(inline_message_id=inline_message_id,
                                                            text=f'{query}\n\n_{answer_tr}:_\n{loading_tr}',
                                                            parse_mode=constants.ParseMode.MARKDOWN)

                        logging.info(f'Generating response for inline query by {name}')
                        response, total_tokens = await self.openai.get_chat_response(chat_id=user_id, query=query)

                        if is_direct_result(response):
                            cleanup_intermediate_files(response)
                            await edit_message_with_retry(context, chat_id=None,
                                                          message_id=inline_message_id,
                                                          text=f'{query}\n\n_{answer_tr}:_\n{unavailable_message}',
                                                          is_inline=True)
                            return

                        text_content = f'{query}\n\n_{answer_tr}:_\n{response}'

                        # We only want to send the first 4096 characters. No chunking allowed in inline mode.
                        text_content = text_content[:4096]

                        # Edit the original message with the generated content
                        await edit_message_with_retry(context, chat_id=None, message_id=inline_message_id,
                                                      text=text_content, is_inline=True)

                    await wrap_with_indicator(update, context, _send_inline_query_response,
                                              constants.ChatAction.TYPING, is_inline=True)

                add_chat_request_to_usage_tracker(self.usage, self.config, user_id, total_tokens)

        except Exception as e:
            logging.error(f'Failed to respond to an inline query via button callback: {e}')
            logging.exception(e)
            localized_answer = localized_text('chat_fail', self.config['bot_language'])
            await edit_message_with_retry(context, chat_id=None, message_id=inline_message_id,
                                          text=f"{query}\n\n_{answer_tr}:_\n{localized_answer} {str(e)}",
                                          is_inline=True)

    async def check_allowed_and_within_budget(self, update: Update, context: ContextTypes.DEFAULT_TYPE,
                                              is_inline=False) -> bool:
        """
        Checks if the user is allowed to use the bot and if they are within their budget
        :param update: Telegram update object
        :param context: Telegram context object
        :param is_inline: Boolean flag for inline queries
        :return: Boolean indicating if the user is allowed to use the bot
        """
        name = update.inline_query.from_user.name if is_inline else update.message.from_user.name
        user_id = update.inline_query.from_user.id if is_inline else update.message.from_user.id

        if not await is_allowed(self.config, update, context, is_inline=is_inline):
            logging.warning(f'User {name} (id: {user_id}) is not allowed to use the bot')
            await self.send_disallowed_message(update, context, is_inline)
            return False
        if not is_within_budget(self.config, self.usage, update, is_inline=is_inline):
            logging.warning(f'User {name} (id: {user_id}) reached their usage limit')
            await self.send_budget_reached_message(update, context, is_inline)
            return False

        return True

    async def send_disallowed_message(self, update: Update, _: ContextTypes.DEFAULT_TYPE, is_inline=False):
        """
        Seer.nds the disallowed message to the us
        """
        if not is_inline:
            await update.effective_message.reply_text(
                message_thread_id=get_thread_id(update),
                text=self.disallowed_message,
                disable_web_page_preview=True
            )
        else:
            result_id = str(uuid4())
            await self.send_inline_query_result(update, result_id, message_content=self.disallowed_message)

    async def send_budget_reached_message(self, update: Update, _: ContextTypes.DEFAULT_TYPE, is_inline=False):
        """
        Sends the budget reached message to the user.
        """
        if not is_inline:
            await update.effective_message.reply_text(
                message_thread_id=get_thread_id(update),
                text=self.budget_limit_message
            )
        else:
            result_id = str(uuid4())
            await self.send_inline_query_result(update, result_id, message_content=self.budget_limit_message)

    async def post_init(self, application: Application) -> None:
        """
        Post initialization hook for the bot.
        """
        await application.bot.set_my_commands(self.group_commands, scope=BotCommandScopeAllGroupChats())
        await application.bot.set_my_commands(self.commands)

    def run(self):
        """
        Runs the bot indefinitely until the user presses Ctrl+C
        """
        application = ApplicationBuilder() \
            .token(self.config['token']) \
            .proxy_url(self.config['proxy']) \
            .get_updates_proxy_url(self.config['proxy']) \
            .post_init(self.post_init) \
            .concurrent_updates(True) \
            .build()

        """
            BotCommand(command='info', description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ"),
            BotCommand(command='menu', description="–ú–µ–Ω—é"),
            BotCommand(command='account', description="–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"),
            BotCommand(command='referral', description="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"),
            BotCommand(command='support', description="–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"),
        """

        application.add_handler(CommandHandler('start', self.start))
        application.add_handler(CommandHandler('naming', self.naming))
        application.add_handler(CommandHandler('shorts', self.shorts))
        application.add_handler(CommandHandler('seo', self.seo))
        application.add_handler(CommandHandler('video', self.video))
        application.add_handler(CommandHandler('restart', self.restart))

        application.add_handler(CommandHandler('info', self.info))
        application.add_handler(CommandHandler('menu', self.menu))
        application.add_handler(CommandHandler('account', self.account))
        application.add_handler(CommandHandler('referral', self.referral))
        application.add_handler(CommandHandler('support', self.support))

        application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), self.handle_message))
        application.add_handler(CallbackQueryHandler(self.handle_callback_query))
        # application.add_handler(CommandHandler('reset', self.reset))
        # application.add_handler(CommandHandler('help', self.help))
        # application.add_handler(CommandHandler('image', self.image))
        # application.add_handler(CommandHandler('tts', self.tts))
        # application.add_handler(CommandHandler('stats', self.stats))
        # application.add_handler(CommandHandler('resend', self.resend))
        # application.add_handler(CommandHandler(
        #     'chat', self.prompt, filters=filters.ChatType.GROUP | filters.ChatType.SUPERGROUP)
        # )
        # application.add_handler(MessageHandler(
        #     filters.PHOTO | filters.Document.IMAGE,
        #     self.vision))
        # application.add_handler(MessageHandler(
        #     filters.AUDIO | filters.VOICE | filters.Document.AUDIO |
        #     filters.VIDEO | filters.VIDEO_NOTE | filters.Document.VIDEO,
        #     self.transcribe))
        # application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), self.prompt))
        # application.add_handler(InlineQueryHandler(self.inline_query, chat_types=[
        #     constants.ChatType.GROUP, constants.ChatType.SUPERGROUP, constants.ChatType.PRIVATE
        # ]))
        # application.add_handler(CallbackQueryHandler(self.handle_callback_inline_query))

        application.add_error_handler(error_handler)

        application.run_polling()
